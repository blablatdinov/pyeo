# The MIT License (MIT).
#
# Copyright (c) 2023-2025 Almaz Ilaletdinov <a.ilaletdinov@yandex.ru>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.

[tool.poetry]
name = "eo-styleguide"
packages = [
    {include = "pyeo"}
]
version = "0.1.0"
description = "Pyeo is an advanced static analysis tool tailored specifically to enforce the principles advocated by Elegant Objects (elegantobjects.org) in Python projects. It serves as a quality control instrument to ensure that your Python code adheres to the core tenets of elegance, simplicity, and maintainability."
authors = ["Almaz Ilaletdinov <a.ilaletdinov@yandex.ru>"]
license = "MIT"
readme = "README.md"

[tool.poetry.plugins."flake8.extension"]
PEO = "pyeo.main:Plugin"

[tool.poetry.dependencies]
python = "^3.10"
flake8 = "^7.1"
flake8-final = "*"
flake8-override = "*"
flake8-no-private-methods = "*"
flake8-one-class = "*"

[tool.poetry.group.dev.dependencies]
ruff = "0.13.1"
wemake-python-styleguide = "0.19.2"
flake8-copyright = "0.2.4"
deltaver = "1.0.0"
astpretty = "3.0.0"
pytest = "8.4.2"
mypy = "1.18.2"
types-flake8 = "7.3.0.20250622"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 120
preview = true
output-format = "concise"

[tool.ruff.lint]
select = ["ALL"]
preview = true
fixable = [
  "F401",   # Unused import
  "I001",   # Import block is un-sorted or un-formatted
  "COM812", # Trailing comma missing
]
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ARG001",  # Unused function argument
  "ARG002",  # Unused method argument
  "D100",    # Missing docstring in public module
  "D104",    # Missing docstring in public package
  "D203",    # no-blank-line-before-class
  "D213",    # multi-line-summary-first-line
  "D418",    # Function decorated with `@overload` shouldn't contain a docstring
  "DOC201",  # `return` is not documented in docstring
  "DOC501",  # Check by flake8-docstrings
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean-typed positional argument in function definition
  "FIX002",  # Line contains T0DO, consider resolving the issue
  "FLY002",  # We not use f-strings
  "INP001",  # File ... is part of an implicit namespace package. Add an `__init__.py`.
  "RUF100",  # WPS primary linter
  "RUF001",  # Project contain cyrillic symbols
  "RUF002",  # Project contain cyrillic symbols
  "RUF003",  # Project contain cyrillic symbols
  "RET505",  # Unnecessary `elif` after `return` statement
  "RET506",  # Unnecessary `elif` after `raise` statement
  "UP030",   # We use explicit references
  "UP032",   # We not use f-strings
  "UP004",   # Class `PrayerReaction` inherits from `object`
  "TD",      # "t0do" formats
  "TC001",   # Move application import `...` into a type-checking block
  "TC002",   # Move third-party import into a type-checking block
  "PLR630",  # We not respect staticmethods
  "G001",    # Only .format for strings
  "TRY400",  # logger.error enable
  "PLE1205", # Too many arguments for `logging` format string
]
external = [
  "WPS",
  "FIN",
  "PEO",
  "OVR",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",    # use of `assert` detected
  "D",       # Docstrings
  "ANN",     # Annotations
  "PLR2004", # Magic value
  "PLR0913", # Too many arguments to function call
]
