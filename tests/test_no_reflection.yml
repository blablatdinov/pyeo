- case: forbid_names
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    @elegant
    class House(Protocol):

        def area(self) -> int: ...


    @final
    @elegant
    class HttpHouse(House):

        def area(self) -> int:
            for _ in range(10):
                if 5 < 7:
                    print(isinstance(5, int))
                    print(type(5))
                    print(issubclass(HttpHouse, HttpHouse))
                    print(hasattr(self, 'area'))
            return 5
  
  out: |
    main:12: error: Class 'HttpHouse' has 'builtins.isinstance' reflection function call.  [misc]
    main:12: error: Class 'HttpHouse' has 'builtins.type' reflection function call.  [misc]
    main:12: error: Class 'HttpHouse' has 'builtins.issubclass' reflection function call.  [misc]
    main:12: error: Class 'HttpHouse' has 'builtins.hasattr' reflection function call.  [misc]
