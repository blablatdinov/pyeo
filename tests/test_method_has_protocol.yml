- case: correct
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    class House(Protocol):
        def area(self) -> int: ...

    @elegant
    @final
    class PgHouse(House):

        def area(self) -> int:
            return 10

- case: correct_async
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    class House(Protocol):
        async def area(self) -> int: ...

    @elegant
    @final
    class PgHouse(House):

        async def area(self) -> int:
            return 10

- case: method_without_protocol
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    class House(Protocol):
        def area(self) -> int: ...

    @elegant
    @final
    class HttpHouse(House):

        def area(self) -> int:
            return 5

        def extra(self) -> str:
            return '1'
  
  out: |
    main:14: error: Class 'HttpHouse' have public extra method 'extra' without protocol.  [misc]

- case: implement_two_protocol
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    class House(Protocol):
        def area(self) -> int: ...

    class Extra(Protocol):
        def extra(self) -> str: ...

    @elegant
    @final
    class HttpHouse(House, Extra):

        def area(self) -> int:
            return 5

        def extra(self) -> str:
            return '1'

- case: classmethod_ctor_without_protocol
  main: |
    from pyeo import elegant
    from typing import Protocol, final

    class House(Protocol):
        def area(self) -> int: ...

    class Extra(Protocol):
        def extra(self) -> str: ...

    @elegant
    @final
    class HttpHouse(House, Extra):

        def __init__(self):
            self._some_attr = 42

        @classmethod
        def secondary_ctor(cls):
            return cls()

        def area(self) -> int:
            return 5

        def extra(self) -> str:
            return '1'

- case: test_stringable
  main: |
    import attrs
    from pyeo import elegant
    from typing import Protocol, final

    @elegant
    class Stringable(Protocol):
        """Интерфейс объектов, которые можно привести к строке."""

        def __str__(self) -> str:
            """Приведение к строке."""

    @final
    @attrs.define(frozen=True)
    @elegant
    class ThroughStringable(Stringable):
        """Обертка для строки."""

        _source: str

        def __str__(self):
            """Строковое представление.

            :return: str
            """
            return self._source

- case: different_files
  main: |
    from pyeo import elegant
    from typing import Protocol, final
    from myapp.interface import House  # TODO try remove this line

    @elegant
    @final
    class PgHouse(House):

        async def area(self) -> int:
            return 10
  files:
    - path: myapp/__init__.py
    - path: myapp/interface.py
      content: |
        from pyeo import elegant
        from typing import Protocol, final

        @elegant
        class House(Protocol):
            async def area(self) -> int: ...
