- case: correct
  main: |
    from pyeo import elegant
    from typing import Protocol

    @elegant
    class House(Protocol):
        def area(self) -> int: ...

        def cost(self) -> int:
            """Method for calculating cost."""

        def sell(self) -> bool:
            pass

- case: method_has_expr
  main: |
    from pyeo import elegant
    from typing import Protocol

    @elegant
    class House(Protocol):
        def area(self) -> int:
            return 5
          
  out: |
    main:5: error: Protocol 'House' method 'area' has implementation  [misc]

- case: expr_after_docstring_or_path
  main: |
    from pyeo import elegant
    from typing import Protocol

    @elegant
    class House(Protocol):
        def area(self) -> int:
            pass
            var = 5
            return var

        def cost(self) -> int:
            """Method for calculating cost."""
            var = 100 * self.area()
            return var
          
  out: |
    main:5: error: Protocol 'House' method 'area' has implementation  [misc]
    main:5: error: Protocol 'House' method 'cost' has implementation  [misc]

- case: generic_protocol
  main: |
    import attrs
    from pyeo import elegant
    from typing import Protocol, final, TypeVar

    T = TypeVar('T', covariant=True)

    @elegant
    class Stringable(Protocol[T]):
        """Интерфейс объектов, которые можно привести к строке."""

        def __str__(self) -> str:
            """Приведение к строке."""

    @final
    @attrs.define(frozen=True)
    @elegant
    class ThroughStringable(Stringable):
        """Обертка для строки."""

        _source: str

        def __str__(self):
            """Строковое представление.

            :return: str
            """
            return self._source
